#!/usr/bin/env python

import rospy
import tf
import math 

from geometry_msgs.msg  import PoseStamped, Point
from nav_msgs.msg       import Odometry, Path
from std_msgs.msg       import Header
from vn300.msg          import gps, ins

class OdomToPath:
    def __init__(self):
        self.odom_sub = rospy.Subscriber('/vectornav/ins',       ins,  self.to_path, queue_size=10)
        self.path_pub = rospy.Publisher( '/golfcart_ekf/truth',  Path,   latch=True, queue_size=10)
        
        self.br = tf.TransformBroadcaster()
        self.path = Path()
        self.path.header.frame_id = 'world'
        self.path.poses.append(PoseStamped())

        self.time_init = False
        self.time_prev = rospy.rostime.Time()
        self.header_prev = Header()


    def to_path(self, msg):
        if not self.time_init:
            self.time_init = True
            self.lat_home = msg.LLA.x
            self.lon_home = msg.LLA.y
            rospy.loginfo("[ins_to_path] Initial LLA X %f, LLA Y %f",self.lat_home,self.lon_home)
        else:
            # Ellipsoidal model calculation of Earth
            a = 6378137.0000
            b = 6356752.3142
            R = math.sqrt(( math.pow( math.pow(a,2) * math.cos(msg.LLA.x*math.pi/180), 2)+ \
                            math.pow( math.pow(b,2) * math.sin(msg.LLA.x*math.pi/180), 2))/ \
                           (math.pow( a * math.cos(msg.LLA.x*math.pi/180), 2)+ \
                            math.pow( b * math.sin(msg.LLA.x*math.pi/180), 2))) + msg.LLA.z

            # Transform LLH to 2D position
            dlon = msg.LLA.y - self.lon_home
            dlat = msg.LLA.x - self.lat_home
            dE = R * math.radians(dlon)     
            dN = R * math.radians(dlat)     

            point = Point(dE,dN,0)

            pose = PoseStamped()
            pose.header.frame_id = 'world'
            pose.header = msg.header
            pose.pose.position = point

            self.path.header.frame_id = msg.header.frame_id
            self.path.header.stamp = rospy.Time.now()
            self.path.header.seq = msg.header.seq
            self.path.poses.append(pose)

            self.path_pub.publish(self.path)
        
        self.time_prev = msg.header.stamp.to_sec()



    def run(self):
        
        rate = rospy.Rate(50) 
        while(not rospy.is_shutdown()):
            self.br.sendTransform(  (0, 0, 0),
                                    tf.transformations.quaternion_from_euler(0, 0, 0),
                                    rospy.Time.now(),
                                    self.path.header.frame_id,
                                    'world')
            rate.sleep()


if __name__ == '__main__':
    rospy.init_node('ins_to_path')
    odom_to_path = OdomToPath()
    odom_to_path.run()